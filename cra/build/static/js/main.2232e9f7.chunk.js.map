{"version":3,"sources":["components/generation/directions.ts","components/generation/Cell/index.ts","components/generation/Cell/Cell.ts","components/generation/Grid/index.ts","components/generation/Grid/Grid.ts","components/Stage/Stage.css.js","components/generation/seek.ts","statechart/statechart.ts","components/Stage/Stage.tsx","components/Stage/index.ts","components/App/reducer.ts","components/App/App.css.js","components/App/App.tsx","components/App/index.ts","hooks/useTypesafeActions.ts","serviceWorker.ts","index.tsx"],"names":["DIRECTIONS","index","name","getIndices","rowIndex","colIndex","Cell","canvasCtx","size","borderWeight","borderColor","cursorColor","visitedColor","backtrackColor","renderInitial","isStart","isMiddle","isEnd","x","y","connections","walls","visited","pathId","cursor","backtrack","blockedInternal","blockedExternal","this","cell","mutual","push","connect","filter","c","disconnect","prevCell","drawFill","getFillColor","drawWalls","color","fillX","fillY","fillStyle","fillRect","strokeStyle","lineWidth","line","x1","y1","x2","y2","beginPath","moveTo","lineTo","stroke","Grid","rows","cols","startIndex","cellSize","cellTotal","endIndex","cells","create","middleRowIndex","Math","floor","middleIndex","startCell","getCellByIndex","setAsVisited","map","direction","nRowIndex","nColIndex","getNeighbors","neighbor","isVisited","neighbors","getUnvisitedNeighbors","random","length","getCells","draw","Canvas","styled","canvas","seek","next","grid","current","pickNeighbor","visit","machine","createMachine","id","strict","initial","context","settings","gridColumns","gridRows","fps","undefined","currentCell","unvisitedNeighbors","stack","on","INJECT_REFS","target","states","idle","start","entry","console","log","after","SEEK_INTERVAL","always","advance","cond","complete","RESTART","guards","isDeadEnd","isBackAtStart","actions","initGeneration","assign","gridRef","newSettings","getStartCell","findNeighbors","pickNextCell","pushToStack","popFromStack","pop","setAsBacktrack","delays","Stage","playRequestTS","width","height","pixelRatio","window","devicePixelRatio","canvasRef","React","useRef","useMachine","send","useEffect","getContext","clearRect","dw","dh","ref","memo","_","settingsChanging","Actions","createPlayRequest","createAction","setFPS","setCellSize","setBorderWeight","setGridColumns","setGridRows","setSettingsChanging","reducer","s","type","payload","getType","Form","form","APP_WIDTH","innerWidth","APP_HEIGHT","innerHeight","CellSize","initialState","GRID_SIZE_DEFAULT","App","useReducer","state","dispatch","useMemo","Object","keys","reduce","ba","actionName","actionCreator","dispatcher","apply","arguments","useTypesafeActions","className","Boolean","value","min","max","step","onMouseDown","onMouseUp","onChange","parseInt","onClick","event","preventDefault","Date","getTime","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2232e9f7.chunk.js","sourcesContent":["export const DIRECTIONS = [\n  {\n    index: 0,\n    name: 'up',\n    getIndices: (rowIndex: number, colIndex: number) => [\n      rowIndex - 1,\n      colIndex,\n    ],\n  },\n  {\n    index: 1,\n    name: 'right',\n    getIndices: (rowIndex: number, colIndex: number) => [\n      rowIndex,\n      colIndex + 1,\n    ],\n  },\n  {\n    index: 2,\n    name: 'down',\n    getIndices: (rowIndex: number, colIndex: number) => [\n      rowIndex + 1,\n      colIndex,\n    ],\n  },\n  {\n    index: 3,\n    name: 'left',\n    getIndices: (rowIndex: number, colIndex: number) => [\n      rowIndex,\n      colIndex - 1,\n    ],\n  },\n];\n","import Cell from './Cell';\n\nexport type { Cell, CellMethods } from './types';\n\nexport default Cell;\n","import type { Cell as TCell } from './types';\n\nconst NORTH: number = 0;\nconst EAST: number = 1;\nconst SOUTH: number = 2;\nconst WEST: number = 3;\n\ntype Connections = TCell[];\ntype Walls = boolean[];\n\nexport default class Cell implements TCell {\n  canvasCtx: any;\n  index: number;\n  rowIndex: number;\n  colIndex: number;\n  x: number;\n  y: number;\n  size: number;\n  borderColor: string;\n  borderWeight: number;\n  cursorColor: string;\n  visitedColor: string;\n  backtrackColor: string;\n  renderInitial: boolean;\n  isStart: boolean;\n  isMiddle: boolean;\n  isEnd: boolean;\n  connections: Connections;\n  walls: Walls;\n  visited: boolean;\n  pathId: string;\n  cursor: boolean;\n  backtrack: boolean;\n  blockedInternal: boolean;\n  blockedExternal: boolean;\n\n  constructor({\n    canvasCtx,\n    index,\n    rowIndex,\n    colIndex,\n    size = 25,\n    borderWeight = 2,\n    borderColor = 'gray',\n    cursorColor = 'yellow',\n    visitedColor = 'rgba(0, 0, 0, 0.1)',\n    backtrackColor = 'white',\n    renderInitial = false,\n    isStart = false,\n    isMiddle = false,\n    isEnd = false,\n  }: TCell) {\n    this.canvasCtx = canvasCtx;\n    this.index = index;\n\n    this.rowIndex = rowIndex;\n    this.colIndex = colIndex;\n    this.x = this.colIndex * size + borderWeight;\n    this.y = this.rowIndex * size + borderWeight;\n    this.size = size;\n    this.borderColor = borderColor;\n    this.borderWeight = borderWeight;\n    this.cursorColor = cursorColor;\n    this.visitedColor = visitedColor;\n    this.backtrackColor = backtrackColor;\n    this.isStart = isStart;\n    this.isMiddle = isMiddle;\n    this.isEnd = isEnd;\n\n    this.connections = [];\n\n    if (renderInitial) {\n      this.walls = [true, true, true, true];\n    } else {\n      this.walls = [false, false, false, false];\n    }\n\n    this.visited = false;\n  }\n\n  getIndex() {\n    return this.index;\n  }\n\n  getConnections() {\n    return this.connections;\n  }\n\n  connect(cell: Cell, { mutual } = { mutual: true }) {\n    this.connections.push(cell);\n\n    if (cell.rowIndex > this.rowIndex) {\n      this.walls[SOUTH] = false;\n    }\n\n    if (cell.rowIndex < this.rowIndex) {\n      this.walls[NORTH] = false;\n    }\n\n    if (cell.colIndex > this.colIndex) {\n      this.walls[EAST] = false;\n    }\n\n    if (cell.colIndex < this.colIndex) {\n      this.walls[WEST] = false;\n    }\n\n    if (mutual) {\n      cell.connect(this, { mutual: false });\n    }\n\n    return this;\n  }\n\n  disconnect(cell: Cell, { mutual } = { mutual: true }) {\n    this.connections = this.connections.filter((c) => c.index === cell.index);\n\n    if (mutual) {\n      cell.disconnect(this, { mutual: false });\n    }\n\n    return this;\n  }\n\n  isVisited() {\n    return this.visited;\n  }\n\n  setAsBacktrack() {\n    this.backtrack = true;\n  }\n\n  setAsVisited() {\n    this.visited = true;\n  }\n\n  visit(prevCell: Cell, pathId: string) {\n    this.pathId = pathId;\n    this.visited = true;\n\n    // Mark the search cursor as true.\n    // This will be set to false at the end of draw().\n    this.cursor = true;\n\n    if (!this.isStart && !this.isEnd) {\n      this.walls = [true, true, true, true];\n    }\n\n    if (prevCell) {\n      this.connect(prevCell);\n    }\n    return this;\n  }\n\n  hasDifferentPathId(cell: Cell) {\n    return this.pathId && cell.pathId && this.pathId !== cell.pathId;\n  }\n\n  getFillColor() {\n    switch (true) {\n      case this.blockedExternal:\n      case this.blockedInternal:\n        return this.borderColor;\n      case this.cursor:\n        return this.cursorColor;\n      case this.backtrack:\n        return this.backtrackColor;\n      case this.visited:\n        return this.visitedColor;\n      default:\n        return 'white';\n    }\n  }\n\n  draw() {\n    this.drawFill(this.getFillColor());\n    this.drawWalls(this.walls);\n\n    // Set cursor to false so it only shows on a single render.\n    this.cursor = false;\n  }\n\n  drawFill(color: string) {\n    const fillX = this.x + 0.5 * this.borderWeight;\n    const fillY = this.y + 0.5 * this.borderWeight;\n\n    this.canvasCtx.fillStyle = color;\n    this.canvasCtx.fillRect(fillX, fillY, this.size, this.size);\n  }\n\n  drawWalls(walls: Walls) {\n    const { canvasCtx } = this;\n\n    canvasCtx.strokeStyle = this.borderColor;\n    canvasCtx.lineWidth = this.borderWeight;\n\n    if (this.walls[NORTH]) {\n      this.line(this.x, this.y, this.x + this.size, this.y);\n    }\n\n    if (this.walls[EAST]) {\n      if (!this.isEnd) {\n        this.line(\n          this.x + this.size,\n          this.y,\n          this.x + this.size,\n          this.y + this.size\n        );\n      }\n    }\n\n    if (this.walls[SOUTH]) {\n      this.line(\n        this.x,\n        this.y + this.size,\n        this.x + this.size,\n        this.y + this.size\n      );\n    }\n\n    if (this.walls[WEST]) {\n      if (!this.isStart) {\n        this.line(this.x, this.y, this.x, this.y + this.size);\n      }\n    }\n  }\n\n  line(x1: number, y1: number, x2: number, y2: number, color: string = '#000') {\n    const { canvasCtx } = this;\n\n    canvasCtx.strokeStyle = color;\n    canvasCtx.beginPath();\n    canvasCtx.moveTo(x1, y1);\n    canvasCtx.lineTo(x2, y2);\n    canvasCtx.stroke();\n  }\n}\n","import Grid from './Grid';\n\nexport type { Grid, GridMethods } from './types';\n\nexport default Grid;\n","import { DIRECTIONS } from '../directions';\nimport type { Cell as TCell, CellMethods } from '../Cell';\nimport Cell from '../Cell';\nimport { Grid as TGrid } from './types';\n\nexport default class Grid implements TGrid {\n  rows: number;\n  cols: number;\n  cellTotal: number;\n  cellSize: number;\n  borderWeight: number;\n  startIndex: number;\n  endIndex: number;\n  cells: Cell[];\n  canvasCtx: any;\n\n  constructor({\n    rows,\n    cols,\n    borderWeight = 1,\n    startIndex = 0,\n    cellSize = 10,\n    canvasCtx,\n  }: TGrid) {\n    this.rows = rows;\n    this.cols = cols;\n    this.cellTotal = rows * cols;\n    this.cellSize = cellSize;\n    this.borderWeight = borderWeight;\n    this.startIndex = startIndex;\n    this.endIndex = this.cellTotal - 1;\n    this.cells = [];\n    this.canvasCtx = canvasCtx;\n\n    this.create();\n  }\n\n  create() {\n    // const middleColIndex = Math.floor(gridColumns / 2);\n    const middleRowIndex = Math.floor(this.rows / 2);\n    const middleIndex = middleRowIndex * this.cols + middleRowIndex;\n\n    for (let index = 0; index < this.cellTotal; index++) {\n      const cell = new Cell({\n        canvasCtx: this.canvasCtx,\n        index,\n        colIndex: index % this.cols,\n        rowIndex: Math.floor(index / this.cols),\n        size: this.cellSize,\n        borderWeight: this.borderWeight,\n        visitedColor: 'rgb(208, 222, 247)',\n        backtrackColor: '#fff',\n        isStart: index === this.startIndex,\n        isMiddle: index === middleIndex,\n        isEnd: index === this.endIndex,\n        renderInitial: true,\n      });\n\n      this.cells.push(cell);\n    }\n  }\n\n  getCells() {\n    return this.cells;\n  }\n\n  getRows() {\n    return this.rows;\n  }\n\n  getColumns() {\n    return this.cols;\n  }\n\n  getStartCell(): TCell {\n    const startCell = this.getCellByIndex();\n    startCell.setAsVisited();\n    return startCell;\n  }\n\n  getCellByIndex(index = 0) {\n    return this.cells[index];\n  }\n\n  getNeighbors(cell: TCell) {\n    const neighbors = DIRECTIONS.map((direction) => {\n      const [nRowIndex, nColIndex] = direction.getIndices(\n        cell.rowIndex,\n        cell.colIndex\n      );\n      // Ensure it is on the grid.\n      if (\n        nRowIndex < 0 ||\n        nColIndex < 0 ||\n        nRowIndex > this.rows - 1 ||\n        nColIndex > this.cols - 1\n      ) {\n        return null;\n      }\n      const index = nRowIndex * this.cols + nColIndex;\n      return index;\n    })\n      .filter((index: number | null): index is number => index !== null)\n      .map((index) => this.cells[index]);\n\n    return neighbors;\n  }\n\n  getUnvisitedNeighbors(cell: TCell) {\n    return this.getNeighbors(cell).filter((neighbor: CellMethods) => {\n      return !neighbor.isVisited();\n    });\n  }\n\n  pickNeighbor(cell: TCell) {\n    const neighbors = this.getUnvisitedNeighbors(cell);\n    const nextIndex = Math.floor(Math.random() * neighbors.length);\n    return neighbors[nextIndex];\n  }\n\n  // Draw all cells.\n  draw() {\n    const cells = this.getCells();\n    for (let cell of cells) {\n      cell.draw();\n    }\n  }\n}\n","import styled from 'styled-components';\n\nexport const Canvas = styled.canvas`\n  margin: 100px;\n`;\n","// import type { GridMethods as Grid, GridMethods } from './Grid';\n// import type { GridMethods } from './Grid';\nimport type { Cell } from './Cell';\n\ninterface SeekOptions {\n  // grid: Grid | GridMethods;\n  grid: any;\n  pathId: string;\n  current: Cell | null;\n  startIndex: number;\n  endIndex?: number | null;\n}\n\nexport const seek = ({\n  grid,\n  pathId,\n  current,\n  startIndex = 0,\n  endIndex = null,\n}: SeekOptions) => {\n  let next;\n  if (current) {\n    next = grid.pickNeighbor(current);\n\n    // If next cell is found, mark it as visited.\n    if (next) {\n      return next.visit(current, pathId);\n    }\n  } else {\n    if (endIndex !== null) {\n      next = grid.getCells()[endIndex];\n      next.isEnd = true;\n    } else {\n      next = grid.getCells()[startIndex];\n      next.isStart = true;\n    }\n\n    next.visit(null, pathId);\n  }\n\n  return next;\n};\n","import { createMachine, assign } from 'xstate';\nimport type {\n  MazeGenerationContext,\n  MazeGenerationEvent,\n  Typestate,\n} from './types';\n\nimport type { GridMethods } from '../components/generation/Grid';\n\nimport { seek } from '../components/generation/seek';\nimport { Cell, CellMethods } from '../components/generation/Cell';\n\nexport const machine = createMachine<\n  MazeGenerationContext,\n  MazeGenerationEvent,\n  Typestate\n>(\n  {\n    id: 'maze-generation',\n    strict: false,\n    initial: 'idle',\n    context: {\n      settings: {\n        gridColumns: 0,\n        gridRows: 0,\n        startIndex: 0,\n        pathId: 'abc',\n        fps: 3,\n      },\n      grid: undefined,\n      currentCell: undefined,\n      unvisitedNeighbors: [],\n      stack: [],\n    },\n    on: {\n      INJECT_REFS: { target: 'start' },\n    },\n    states: {\n      idle: {},\n      start: {\n        entry: [\n          () => {\n            console.log('------------ START -------------');\n          },\n          'initGeneration',\n          'pushToStack',\n        ],\n        after: {\n          SEEK_INTERVAL: { target: 'seek' },\n        },\n      },\n      seek: {\n        entry: ['findNeighbors'],\n        always: [{ target: 'advance' }],\n      },\n      advance: {\n        always: [{ target: 'backtrack', cond: 'isDeadEnd' }],\n        entry: ['pickNextCell', 'pushToStack'],\n        after: {\n          SEEK_INTERVAL: { target: 'seek' },\n        },\n      },\n      backtrack: {\n        entry: ['popFromStack'],\n        always: [\n          {\n            target: 'complete',\n            cond: 'isBackAtStart',\n          },\n          {\n            target: 'seek',\n          },\n        ],\n      },\n      complete: {\n        on: {\n          RESTART: 'start',\n        },\n      },\n    },\n  },\n  {\n    guards: {\n      isDeadEnd: ({ unvisitedNeighbors }) => {\n        return unvisitedNeighbors.length === 0;\n      },\n      isBackAtStart: ({ stack }) => {\n        return stack.length === 0;\n      },\n    },\n    actions: {\n      initGeneration: assign(({ settings }, { gridRef, fps }: any) => {\n        const newSettings = {\n          ...settings,\n          gridColumns: gridRef.current.cols,\n          gridRows: gridRef.current.rows,\n          fps,\n        };\n        const currentCell = gridRef.current.getStartCell();\n\n        return {\n          settings: newSettings,\n          grid: gridRef.current,\n          currentCell,\n          stack: [],\n        };\n      }),\n      findNeighbors: assign(({ grid, currentCell }) => ({\n        unvisitedNeighbors: (grid as GridMethods).getUnvisitedNeighbors(\n          currentCell\n        ),\n      })),\n      pickNextCell: assign(({ settings, grid, currentCell }) => ({\n        currentCell: seek({\n          grid,\n          pathId: settings.pathId,\n          current: currentCell as Cell,\n          startIndex: 0,\n        }),\n      })),\n      pushToStack: assign(({ stack, currentCell }) => {\n        if (currentCell) {\n          stack.push(currentCell);\n        }\n        return { stack };\n      }),\n      popFromStack: assign(({ stack }) => {\n        const prevCell = stack.pop() as CellMethods;\n        prevCell?.setAsBacktrack();\n        // console.log(`  (backtrack to cell index: ${prevCell?.getIndex()})`);\n        return { stack, currentCell: prevCell };\n      }),\n    },\n    delays: {\n      SEEK_INTERVAL: ({ settings: { fps } }) => {\n        return 1000 / fps;\n      },\n    },\n  }\n);\n","import React from 'react';\nimport { useMachine } from '@xstate/react';\n\nimport Grid from '../generation/Grid';\nimport { Canvas } from './Stage.css';\nimport { machine } from '../../statechart/statechart';\n\ninterface Props {\n  playRequestTS: number;\n  width?: number;\n  height?: number;\n  pixelRatio?: number;\n  fps: number;\n  cellSize: number;\n  borderWeight: number;\n  gridColumns: number;\n  gridRows: number;\n  settingsChanging: boolean;\n}\n\n// const START_INDEX = 0;\n\nconst Stage = ({\n  playRequestTS,\n  width = 100,\n  height = 100,\n  pixelRatio = window.devicePixelRatio,\n  fps,\n  cellSize,\n  borderWeight,\n  gridColumns,\n  gridRows,\n}: Props) => {\n  const canvasRef: any = React.useRef(null);\n  const gridRef = React.useRef<Grid>(\n    new Grid({ cols: gridColumns, rows: gridRows })\n  );\n\n  // eslint-disable-next-line\n  const [state, send] = useMachine(machine);\n\n  const cellTotal = gridColumns * gridRows;\n\n  const endIndex = cellTotal - 1;\n\n  React.useEffect(() => {\n    if (canvasRef && canvasRef.current && gridRef.current) {\n      const canvasCtx = canvasRef.current.getContext('2d');\n      canvasCtx.clearRect(0, 0, width, height);\n\n      gridRef.current = new Grid({\n        cols: gridColumns,\n        rows: gridRows,\n        canvasCtx,\n        cellSize,\n        borderWeight,\n      });\n\n      send('INJECT_REFS', { gridRef, fps });\n    }\n  }, [\n    playRequestTS,\n    fps,\n    cellSize,\n    borderWeight,\n    cellTotal,\n    gridColumns,\n    gridRows,\n    endIndex,\n    height,\n    pixelRatio,\n    width,\n    send,\n  ]);\n\n  if (gridRef.current && gridRef.current.canvasCtx) {\n    gridRef.current.draw();\n  }\n\n  const dw = Math.floor(pixelRatio * width);\n  const dh = Math.floor(pixelRatio * height);\n\n  return <Canvas ref={canvasRef} width={dw} height={dh} />;\n};\n\nexport default React.memo(Stage, (_, { settingsChanging }) => settingsChanging);\n","import Stage from './Stage';\n\nexport default Stage;\n","import { createAction, getType, ActionType } from 'typesafe-actions';\n\nimport { AppState } from './types';\n\nexport const Actions = {\n  createPlayRequest: createAction('CREATE_PLAY_REQUEST')<number>(),\n  setFPS: createAction('SET_FPS')<number>(),\n  setCellSize: createAction('SET_SELL_SIZE')<number>(),\n  setBorderWeight: createAction('SET_BORDER_WEIGHT')<number>(),\n  setGridColumns: createAction('SET_GRID_COLUMNS')<number>(),\n  setGridRows: createAction('SET_GRID_ROWS')<number>(),\n  setSettingsChanging: createAction('SET_SETTINGS_CHANGING')<any>(),\n};\n\nexport const reducer = (\n  s: AppState,\n  { type, payload }: ActionType<typeof Actions>\n) => {\n  switch (type) {\n    case getType(Actions.createPlayRequest):\n      return { ...s, playRequestTS: payload };\n    case getType(Actions.setFPS):\n      return { ...s, fps: payload };\n    case getType(Actions.setCellSize):\n      return { ...s, cellSize: payload };\n    case getType(Actions.setBorderWeight):\n      return { ...s, borderWeight: payload };\n    case getType(Actions.setGridColumns):\n      return { ...s, gridColumns: payload };\n    case getType(Actions.setGridRows):\n      return { ...s, gridRows: payload };\n    case getType(Actions.setSettingsChanging):\n      return { ...s, settingsChanging: payload };\n    default:\n      return s;\n  }\n};\n\n// import { unionize, ofType, UnionOf } from \"unionize\";\n// const Actions = unionize({\n//   increment: {},\n//   decrement: {},\n//   reset: {},\n//   setValue: ofType<{ value: number }>()\n// });\n\n// const reducer = (s: State, a: UnionOf<typeof Actions>) =>\n//   Actions.match(a, {\n//     increment: () => ({ counter: s.counter + 1 }),\n//     decrement: () => ({ counter: s.counter - 1 }),\n//     reset: () => ({ counter: 0 }),\n//     setValue: a => ({ counter: a.value }),\n//     default: () => s\n//   });\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  display: flex;\n  flex-direction: column;\n`;\n","import React from 'react';\n\nimport './App.css';\nimport Stage from '../Stage';\nimport { useTypesafeActions } from '../../hooks/useTypesafeActions';\nimport { AppState } from './types';\nimport { Actions, reducer } from './reducer';\nimport { Form } from './App.css.js';\n\nconst FPS_DEFAULT = 24;\nconst BORDER_WEIGHT_DEFAULT = 1;\nconst GRID_SIZE_DEFAULT = 20;\n\nconst APP_WIDTH = window.innerWidth;\nconst APP_HEIGHT = window.innerHeight;\n\nconst CellSize = {\n  DEFAULT: 20,\n  MIN: 5,\n  MAX: 100,\n};\n\nconst initialState: AppState = {\n  playRequestTS: 0,\n  fps: FPS_DEFAULT,\n  cellSize: CellSize.DEFAULT,\n  borderWeight: BORDER_WEIGHT_DEFAULT,\n  gridColumns: GRID_SIZE_DEFAULT * 2,\n  gridRows: GRID_SIZE_DEFAULT,\n  settingsChanging: false,\n};\n\nconst App = () => {\n  const [state, actions] = useTypesafeActions<AppState, typeof Actions>(\n    reducer,\n    initialState,\n    Actions\n  );\n\n  return (\n    <div className=\"App\">\n      <Stage\n        playRequestTS={state.playRequestTS}\n        width={APP_WIDTH}\n        height={APP_HEIGHT}\n        fps={state.fps}\n        cellSize={state.cellSize}\n        borderWeight={state.borderWeight}\n        gridColumns={state.gridColumns}\n        gridRows={state.gridRows}\n        pixelRatio={1}\n        settingsChanging={Boolean(state.settingsChanging)}\n      />\n      <Form>\n        <label>\n          FPS ({state.fps})\n          <input\n            type=\"range\"\n            name=\"fps\"\n            value={state.fps}\n            min=\"5\"\n            max=\"60\"\n            step={5}\n            onMouseDown={() => actions.setSettingsChanging(true)}\n            onMouseUp={() => actions.setSettingsChanging(false)}\n            onChange={({ target: { value } }) => {\n              actions.setFPS(parseInt(value, 10));\n            }}\n          />\n        </label>\n        <label>\n          Cell Size ({state.cellSize})\n          <input\n            type=\"range\"\n            name=\"cellSize\"\n            value={state.cellSize}\n            min={CellSize.MIN}\n            max={CellSize.MAX}\n            step={5}\n            onMouseDown={() => actions.setSettingsChanging(true)}\n            onMouseUp={() => actions.setSettingsChanging(false)}\n            onChange={({ target: { value } }) =>\n              actions.setCellSize(parseInt(value, 10))\n            }\n          />\n        </label>\n        <label>\n          Border Weight ({state.borderWeight})\n          <input\n            type=\"range\"\n            name=\"borderWeight\"\n            value={state.borderWeight}\n            min=\"1\"\n            max={0.5 * state.cellSize}\n            onMouseDown={() => actions.setSettingsChanging(true)}\n            onMouseUp={() => actions.setSettingsChanging(false)}\n            onChange={({ target: { value } }) =>\n              actions.setBorderWeight(parseInt(value, 10))\n            }\n          />\n        </label>\n        <label>\n          Grid Columns ({state.gridColumns})\n          <input\n            type=\"range\"\n            name=\"gridColumns\"\n            value={state.gridColumns}\n            min=\"2\"\n            max=\"50\"\n            onMouseDown={() => actions.setSettingsChanging(true)}\n            onMouseUp={() => actions.setSettingsChanging(false)}\n            onChange={({ target: { value } }) =>\n              actions.setGridColumns(parseInt(value, 10))\n            }\n          />\n        </label>\n        <label>\n          Grid Rows ({state.gridRows})\n          <input\n            type=\"range\"\n            name=\"gridRows\"\n            value={state.gridRows}\n            min=\"2\"\n            max=\"50\"\n            onMouseDown={() => actions.setSettingsChanging(true)}\n            onMouseUp={() => actions.setSettingsChanging(false)}\n            onChange={({ target: { value } }) =>\n              actions.setGridRows(parseInt(value, 10))\n            }\n          />\n        </label>\n        <button\n          onClick={(event) => {\n            event.preventDefault();\n            actions.createPlayRequest(new Date().getTime());\n          }}\n        >\n          Replay\n        </button>\n      </Form>\n    </div>\n  );\n};\n\nexport default App;\n","import App from './App';\n\nexport default App;\n","import { Reducer, useReducer, useMemo } from 'react';\nimport { ActionType } from 'typesafe-actions';\n\nexport function useTypesafeActions<\n  S,\n  Actions extends { [key: string]: (...args: any[]) => any }\n>(\n  reducer: Reducer<S, ActionType<Actions>>,\n  initialState: S,\n  actions: Actions\n): [S, Actions] {\n  const [state, dispatch] = useReducer(reducer, initialState);\n  const boundActions = useMemo(() => {\n    function bindActionCreator(\n      actionCreator: (...args: any[]) => any,\n      dispatcher: typeof dispatch\n    ) {\n      return function(this: any) {\n        return dispatcher(\n          actionCreator.apply(this as any, (arguments as unknown) as any[])\n        );\n      };\n    }\n\n    const newActions = Object.keys(actions).reduce((ba, actionName) => {\n      ba[actionName] = bindActionCreator(actions[actionName], dispatch);\n      return ba;\n    }, {} as { [key: string]: (...args: any[]) => any });\n    return newActions;\n  }, [dispatch, actions]);\n  return [state, boundActions as Actions];\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}